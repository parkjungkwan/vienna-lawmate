server:
  port: 8000
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
spring:
  application:
    name: api 
  profile: 
    active: local
  config:
    import: optional:configserver:http://localhost:8888
  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive
  data:
    redis:
      host: 127.0.0.1
      port: 6379
      password: password
      username: root
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 17282809016-72du999nqaefcf2gak9thafq259nbed9.apps.googleusercontent.com
            client-secret: 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
            scope:
              - profile
              - email
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/users/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/users/(?<segment>.*), /$\{segment}
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/admin/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/admin/(?<segment>.*), /$\{segment}
        - id: manage-service
          uri: lb://manage-service
          predicates:
            - Path=/manage/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/manage/(?<segment>.*), /$\{segment}
        - id: lawyer-service
          uri: lb://lawyer-service
          predicates:
            - Path=/lawyers/**
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/lawyers/(?<segment>.*), /$\{segment}
        - id: chat-service
          uri: lb://chat-service
          predicates:
            - Path=/chats/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/chats/(?<segment>.*), /$\{segment}
jwt:
  issuer: lawmate.site
  secret: KimsionKimhojuKimhohyunParkjuhaYangdonggyuKimsionKimhojuKimhohyunParkjuhaYan
  expired:
    access: 600000
    refresh: 1200000

management:
  endpoints:
    web:
      exposure:
        # include: refresh, health, beans, httpexchanges, busrefresh, info, metrics, prometheus
        include: "*" # 테스트를 위해 actuator 전체 노출
  endpoint:
    info:
      enabled: true
    refresh:
      enabled: true
    health:
      enabled: true
    beans:
      enabled: true
    httpexchanges:
      enabled: true
  health:
    circuitbreakers:
      enabled: true # circuitbreakers 정보 노출
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 5
        registerHealthIndicator: true
        # slidingWindowType
        # 기본은 COUNT_BASED 이며 TIME_BASED로 사용할 수 있습니다.
        # slidingWindowSize
        # COUNT_BASED라면 array 크기이며 TIME_BASED라면 초 입니다.
        # failureRateThreshold: 50
        # 실패율 임계값을 설정합니다.
        # 해당 %가 넘거나 같아지면 circuitBreaker의 상태가 Open으로 변경되며
        # 실제 코드를 호출하지 않고 fallback 또는 fail 처리 됩니다.
        # permittedNumberOfCallsInHalfOpenState
        # circuit이 HALF_OPEN 상태일 때 허용되는 call 수
